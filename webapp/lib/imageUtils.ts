import {
    PROCESSED_IMAGES_PATH,
    THUMBNAIL_WIDTH,
    MEDIUM_WIDTH,
    LARGE_WIDTH,
} from './constants/imageConstants';

/**
 * Generates the expected path for a processed image in Supabase storage.
 * Assumes the image processor function saves files like: processed/images/original-path/image-name_width.webp
 *
 * @param originalPath - The original path/name of the uploaded file (e.g., 'user123/my-image.jpg').
 * @param width - The target width (e.g., 200 for thumbnail).
 * @returns The path to the processed image.
 */
export function getProcessedImagePath(
    originalPath: string,
    width: typeof THUMBNAIL_WIDTH | typeof MEDIUM_WIDTH | typeof LARGE_WIDTH,
): string {
    // Basic parsing, might need refinement based on actual file names
    const parts = originalPath.split('/');
    const fileNameWithExt = parts.pop() || '';
    const fileName = fileNameWithExt.split('.').slice(0, -1).join('.'); // Handle names with dots
    const originalDir = parts.join('/');

    // Construct the new path, relative to the processed bucket root
    // Example: uploads/user1/avatar.png -> user1/avatar_200.webp (if originalPath was relative like 'user1/avatar.png')
    // If originalDir includes a root folder like 'uploads', it will be preserved here.
    // Adjust logic if originalPath is expected differently.
    const relativePath = originalDir ? `${originalDir}/${fileName}_${width}.webp` : `${fileName}_${width}.webp`;

    return relativePath;
}

/**
 * Constructs the public URL for a processed image stored in Supabase Storage.
 *
 * @param supabaseUrl - Your Supabase project URL (e.g., from environment variables).
 * @param bucketName - The name of the public bucket where processed images are stored.
 * @param processedPath - The path generated by getProcessedImagePath.
 * @returns The full public URL.
 */
export function getPublicImageUrl(
    supabaseUrl: string,
    bucketName: string, // Make this public in Supabase dashboard
    processedPath: string,
): string {
    // Ensure supabaseUrl doesn't end with a slash
    const baseUrl = supabaseUrl.endsWith('/') ? supabaseUrl.slice(0, -1) : supabaseUrl;
    return `${baseUrl}/storage/v1/object/public/${bucketName}/${processedPath}`;
}

// Potential future additions:
// - Function to generate placeholder data URL (blurhash, etc.)
// - Functions to handle image loading/error states 